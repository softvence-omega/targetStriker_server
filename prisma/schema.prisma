// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//=================== <**********> =======================
// User start
//=================== <**********> =======================

model User {
  id                     String         @id @default(uuid())
  email                  String         @unique
  phone                  String         @unique
  password               String
  name                   String
  isVerified             Boolean        @default(false)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  workerProfile          WorkerProfile?
  clientProfile          ClientProfile?
  adminProfile           AdminProfile?
  UserType               UserType
  active                 Boolean        @default(false)
  fcm_token              Fcm_token?
  modifications          Notification[]
  message                Message[]
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")
}

// ##################### $ User Type Enum Start $ ##############

enum UserType {
  ADMIN
  WORKER
  CLIENT
}

// ##################### $ User Type Enum Start $ ##############

//=================== <**********> =======================
// Fcm_token Start
//=================== <**********> =======================

model Fcm_token {
  id     String  @id @default(uuid())
  token  String  
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

//=================== <**********> =======================
// Fcm_token End
//=================== <**********> =======================

//=================== <**********> =======================
// User End
//=================== <**********> =======================

//=================== <**********> =======================
// Worker Profile Start
//=================== <**********> =======================

model WorkerProfile {
  id                 String            @id @default(uuid())
  User               User?             @relation(fields: [userId], references: [id])
  userId             String?           @unique
  userName           String?           @unique
  workerId           String            @unique
  location           Json
  assignedService    ServiceRequest[]
  invoice            Invoice[]
  profilePic         FileInstance?
  WorkerSpecialist   WorkerSpecialist? @relation(fields: [workerSpecialistId], references: [id])
  workerSpecialistId String?
  isActive           WorkerStatus           @default(ACTIVE)

  Task Task[]

  Reviews Reviews[]
}


enum WorkerStatus {
  ACTIVE
  INACTIVE
}

//=================== <**********> =======================
// Worker Profile End
//=================== <**********> =======================

//=================== <**********> =======================
// WorkerSpecialist Type Start
//=================== <**********> =======================

model WorkerSpecialist {
  id            String          @id @default(uuid())
  name          String          @unique
  workerProfile WorkerProfile[]
}

//=================== <**********> =======================
// WorkerSpecialist Type end
//=================== <**********> =======================

//=================== <**********> =======================
// Task Type Start
//=================== <**********> =======================

model TaskType {
  id             String           @id @default(uuid())
  name           String           @unique
  serviceRequest ServiceRequest[]
}

//=================== <**********> =======================
// Task Type End
//=================== <**********> =======================

//=================== <**********> =======================
// Client Profile End
//=================== <**********> =======================

model ClientProfile {
  id             String           @id @default(uuid())
  User           User?            @relation(fields: [userId], references: [id])
  userId         String?          @unique
  location       String
  userName       String?          @unique
  profilePic     FileInstance?
  invoice        Invoice[]
  serviceRequest ServiceRequest[]

  Task Task[]

  Reviews Reviews[]
}

//=================== <**********> =======================
// Client Profile End
//=================== <**********> =======================

//=================== <**********> =======================
// Admin Profile End
//=================== <**********> =======================

model AdminProfile {
  id         String        @id @default(uuid())
  User       User?         @relation(fields: [userId], references: [id])
  userId     String?       @unique
  profilePic FileInstance?

  ServiceRequest ServiceRequest[]
}

//=================== <**********> =======================
// Admin Profile End
//=================== <**********> =======================

//=================== <**********> =======================
// File Instance Start
//=================== <**********> =======================

model FileInstance {
  id                 String          @id @default(uuid())
  createdAt          DateTime        @default(now())
  filename           String
  originalFilename   String
  path               String
  url                String
  fileType           String
  mimeType           String
  size               Int
  ServiceRequest     ServiceRequest? @relation("ReqPhoto", fields: [serviceRequestId], references: [id])
  serviceRequestId   String?         @unique
  ServiceAfter       ServiceRequest? @relation("AfterPhoto", fields: [serviceAfterId], references: [id])
  serviceAfterId     String?
  ClientProfile      ClientProfile?  @relation(fields: [clientProfileId], references: [id])
  clientProfileId    String?         @unique
  WorkerProfile      WorkerProfile?  @relation(fields: [workerProfileId], references: [id])
  workerProfileId    String?         @unique
  ServiceSignature   ServiceRequest? @relation("Signature", fields: [ServiceSignatureId], references: [id])
  ServiceSignatureId String?         @unique
  Message            Message?        @relation(fields: [messageId], references: [id])
  messageId          String?         @unique
  beforePhoto        ServiceRequest? @relation("BeforePhoto", fields: [beforePhotoId], references: [id])
  beforePhotoId      String?
  ReportPhoto        ReportPhoto?    @relation(fields: [reportPhotoId], references: [id])
  reportPhotoId      String?         @unique
  AdminProfile       AdminProfile?   @relation(fields: [adminProfileId], references: [id])
  adminProfileId     String?         @unique
}

//=================== <**********> =======================
// File Instance End
//=================== <**********> =======================

//=================== <**********> =======================
// ServiceRequest Instance Start
//=================== <**********> =======================

model ServiceRequest {
  id                  String         @id @default(uuid())
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  name                String
  phoneNumber         String
  email               String
  city                String
  postalCode          String
  locationDescription String         @db.Text
  problemDescription  String         @db.Text
  reqPhoto            FileInstance?  @relation("ReqPhoto")
  beforePhoto         FileInstance[] @relation("BeforePhoto")
  afterPhoto          FileInstance[] @relation("AfterPhoto")
  preferredTime       DateTime
  preferredDate       DateTime
  status              RequestStatus  @default(PENDING)
  tasks               Task[]
  basePrice           Int            @default(0)
  AdminProfileId      String?
  AdminProfile        AdminProfile?  @relation(fields: [AdminProfileId], references: [id])
  WorkerProfile       WorkerProfile? @relation(fields: [workerProfileId], references: [id])
  workerProfileId     String?
  Invoice             Invoice?       @relation(fields: [invoiceId], references: [id])
  invoiceId           String?        @unique
  ClientProfile       ClientProfile? @relation(fields: [clientProfileId], references: [id])
  clientProfileId     String?
  TaskType            TaskType?      @relation(fields: [taskTypeId], references: [id])
  taskTypeId          String?
  paymentType         PaymentType    @default(POSTPAID)
  signature           FileInstance?  @relation("Signature")
  rating              Int            @default(0)
  review              String?
  accept              Boolean        @default(false)
  reportPhoto         ReportPhoto[]
  Reviews Reviews?
}

model ReportPhoto {
  id               String          @id @default(uuid())
  isPrev           Boolean         @default(false)
  pic              FileInstance?
  caption          String
  ServiceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  serviceRequestId String?
}

// ##################### $ Payment Type Enum Start $ ##############

enum PaymentType {
  PREPAID
  POSTPAID
}

// ##################### $ Payment Type Enum End $ ##############

// ##################### $ RequestStatus Type Enum Start $ ##############

enum RequestStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  ASSIGNED
  REJECT
  PAUSE
}

// ##################### $ RequestStatus Type Enum End $ ##############

//=================== <**********> =======================
// ServiceRequest Instance end
//=================== <**********> =======================



//=================== <**********> =======================
// Review Start
//=================== <**********> =======================m
model Reviews {
  id               String          @id @default(uuid())
  rating           Int
  review           String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  ServiceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  serviceRequestId String?   @unique
  ClientProfile    ClientProfile?  @relation(fields: [clientProfileId], references: [id])
  clientProfileId  String?
  WorkerProfile    WorkerProfile?  @relation(fields: [workerProfileId], references: [id])
  workerProfileId  String?
}


//=================== <**********> =======================
// Task Start
//=================== <**********> =======================m

// model Task {
//   id               String          @id @default(uuid())
//   price            Int
//   name             String
//   ServiceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
//   serviceRequestId String?
//   done             Boolean         @default(false)
// }

model Task {
  id String @id @default(uuid())
  name String
  price Int
  serviceRequestId String?
  clientId String?
  client ClientProfile? @relation(fields: [clientId], references: [id])
  workerId String?
  worker WorkerProfile? @relation(fields: [workerId], references: [id])
  ServiceRequest ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  done Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}


enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
//=================== <**********> =======================
// Task End
//=================== <**********> =======================

//=================== <**********> =======================
// Notification Start
//=================== <**********> =======================
model Notification {
  id     String   @id @default(uuid())
  title  String
  body   String
  data   Json?
  read   Boolean  @default(false)
  time   DateTime @default(now())
  User   User?    @relation(fields: [userId], references: [id])
  userId String?
}

//=================== <**********> =======================
// Notification Start
//=================== <**********> =======================

//=================== <**********> =======================
// Conversation Start
//=================== <**********> =======================
model Conversation {
  id             String    @id @default(uuid())
  memberOneId    String
  memberOne      User      @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId    String
  memberTwo      User      @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages Message[]
  lasMessage     Message?  @relation("LastConversationMessage")

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

//=================== <**********> =======================
// Conversation Start
//=================== <**********> =======================

//=================== <**********> =======================
// Message Start
//=================== <**********> =======================

model Message {
  id                        String        @id @default(uuid())
  Conversation              Conversation? @relation(fields: [conversationId], references: [id])
  conversationId            String?
  lastConversationMessage   Conversation? @relation("LastConversationMessage", fields: [lastConversationMessageId], references: [id])
  lastConversationMessageId String?       @unique
  content                   String
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  file                      FileInstance?
  User                      User?         @relation(fields: [userId], references: [id])
  userId                    String?
}

//=================== <**********> =======================
// Message Start
//=================== <**********> =======================

//=================== <**********> =======================
// Invoice Start
//=================== <**********> =======================

model Invoice {
  id              String          @id @default(uuid())
  serviceRequest  ServiceRequest?
  invoiceNumber   String          @unique
  ClientProfile   ClientProfile?  @relation(fields: [clientProfileId], references: [id])
  clientProfileId String?
  WorkerProfile   WorkerProfile?  @relation(fields: [workerProfileId], references: [id])
  workerProfileId String?
  BankInfo        BankInfo?       @relation(fields: [bankInfoId], references: [id])
  bankInfoId      String?
  dateIssued      DateTime        @default(now())
  duaDate         DateTime?
  invoiceStatus   InvoiceStatus   @default(IN_PROGRESS)
  totalAmount     Int             @default(0)
  companyId       String?
  CompanyInfo     CompanyDetails? @relation(fields: [companyId], references: [id])
}

enum InvoiceStatus {
  IN_PROGRESS
  CONFIRMED
}

model BankInfo {
  id           String    @id @default(uuid())
  bankName     String?
  IBAN         String?
  BIC_or_SWIFT String?
  invoice      Invoice[]
}

model PaymentTerm {
  id       String  @id @default(uuid())
  prePaid  Boolean @default(false)
  postPaid Boolean @default(false)
}

//=================== <**********> =======================
// Invoice End
//=================== <**********> =======================


//=================== <**********> =======================
// Company Information
//=================== <**********> =======================

model CompanyDetails {
  id    String @id @default(ulid())
  // logo  String
  // logoId  FileInstance @relation(fields: [logo], references: [id])
  city  String
  state String
  phone String @unique
  email String @unique
  name  String
  invoice Invoice[]
}